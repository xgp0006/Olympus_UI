#!/bin/bash
# AEROSPACE GATE 2: Pre-push Validation - ENFORCED, NO BYPASS
# NASA JPL Rule 10 Compliant: ZERO tolerance for failures
set -e  # Exit on ANY failure - MANDATORY

echo "üöÄ AEROSPACE GATE 2: Pre-push Validation"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "‚ö†Ô∏è  CRITICAL: All checks MUST pass - NO EXCEPTIONS"
echo ""

# Stage 1: Type checking - MANDATORY
echo "‚ñ∂ STAGE 1: Type Checking..."
npm run check || {
    echo "‚ùå GATE FAILED: Type errors detected"
    echo "   ALL TypeScript errors MUST be fixed before push"
    exit 1
}
echo "‚úÖ Type check PASSED"
echo ""

# Stage 2: Linting - ZERO WARNINGS
echo "‚ñ∂ STAGE 2: Linting..."
npm run lint || {
    echo "‚ùå GATE FAILED: Linting errors detected"
    echo "   NASA JPL Rule 10: ZERO warnings allowed"
    exit 1
}
echo "‚úÖ Lint check PASSED"
echo ""

# Stage 3: Unit Tests - 100% MUST PASS
echo "‚ñ∂ STAGE 3: Unit Tests..."
npm run test || {
    echo "‚ùå GATE FAILED: Test failures detected"
    echo "   ALL tests MUST pass - NO EXCEPTIONS"
    exit 1
}
echo "‚úÖ Unit tests PASSED"
echo ""

# Stage 4: Build Validation - MUST SUCCEED
echo "‚ñ∂ STAGE 4: Build Validation..."
npm run build || {
    echo "‚ùå GATE FAILED: Build errors detected"
    echo "   Build MUST succeed cleanly"
    exit 1
}
echo "‚úÖ Build validation PASSED"
echo ""

# Stage 5: Security Audit (if npm audit available)
echo "‚ñ∂ STAGE 5: Security Audit..."
if command -v npm audit &> /dev/null; then
    npm audit --production --audit-level=high || {
        echo "‚ö†Ô∏è  WARNING: High severity vulnerabilities detected"
        echo "   Consider fixing security issues"
    }
else
    echo "‚ö†Ô∏è  npm audit not available"
fi
echo ""

# Stage 6: Bundle Size Check
echo "‚ñ∂ STAGE 6: Bundle Size Analysis..."
if [ -d "build" ]; then
    total_size=$(find build -name "*.js" -o -name "*.css" | xargs du -ch | grep total | awk '{print $1}')
    echo "   Bundle size: $total_size"
    
    # Extract numeric value for comparison (handle M/K suffixes)
    numeric_size=$(echo $total_size | sed 's/[^0-9.]//g')
    unit=$(echo $total_size | sed 's/[0-9.]//g')
    
    # Convert to KB for comparison
    if [[ $unit == "M" ]]; then
        size_kb=$(echo "$numeric_size * 1024" | bc)
    else
        size_kb=$numeric_size
    fi
    
    # Check if bundle is too large (>5MB warning)
    if (( $(echo "$size_kb > 5120" | bc -l) )); then
        echo "‚ö†Ô∏è  WARNING: Bundle size exceeds 5MB"
        echo "   Consider code splitting or lazy loading"
    fi
fi
echo ""

# Stage 7: Memory Pattern Validation
echo "‚ñ∂ STAGE 7: Memory Pattern Validation..."
# Check for unbounded allocations
if grep -r "Vec<" src --include="*.rs" | grep -v "BoundedVec\|// NASA JPL"; then
    echo "‚ö†Ô∏è  WARNING: Unbounded Vec allocations detected"
    echo "   Consider using BoundedVec for aerospace compliance"
fi

# Check for unwrap() in non-test code
if grep -r "\.unwrap()" src --include="*.ts" --include="*.svelte" | grep -v test | grep -v "\.test\.\|\.spec\."; then
    echo "‚ùå GATE FAILED: unwrap() detected in production code"
    echo "   NASA JPL Rule 7: All returns must be checked"
    exit 1
fi
echo "‚úÖ Memory pattern check PASSED"
echo ""

# Final Gate Status
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "‚úÖ AEROSPACE GATE 2 PASSED - Push allowed"
echo "üöÄ Code meets aerospace-grade quality standards"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"